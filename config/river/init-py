#!/bin/python

from __future__ import annotations
from subprocess import call, check_output
from psutil import process_iter
from os import listdir
from random import choice

# Just a shorthand for executing a subprocess
def exec(cmd: str) -> None:
    call([cmd], shell=True)

# Set the background randomly
wallpapers: list = listdir("/home/stefur/wallpapers")
rand_img: str = choice(wallpapers)
exec(f"swaybg -m fill -i /home/stefur/wallpapers/{rand_img}")

# The stuff I want to autostart, if it's not already running
# Dict for the process name lookup and the value for the actual command to run
autostart: dict[str, str] = {
    "brightnessctl": "brightnessctl set 20%",
    "waybar": "waybar &",
    "syncthing": "syncthing &",
    "pipewire": "pipewire &",
    "pipewire-pulse": "pipewire-pulse &",
    "mako": "mako &",
    "wlsunset": "wlsunset -l 59.34857:17.87905 &",
    "swayidle": "swayidle -w timeout 300 'swaylock -f -c 000000' before-sleep 'swaylock -f -c 000000' &",
    "polkit-gnome": "/usr/libexec/polkit-gnome-authentication-agent-1 &"
}

# Prepare a set for names of running processes
procs = set()

# Get all the running processes and add them to the set
for proc in process_iter():
    procs.add(proc.name())

# Make sure none of the autostart applications are already running
# This is useful for reloading river
for proc, cmd in autostart.items():
    if proc in procs:
        pass
    else:
        exec(cmd)

# Define a few constants for reusability
M = "Mod4"
A = "Mod1"
S = "Shift"
C = "Control"

MAP_NORMAL = "riverctl map normal"

BROWSER = "firefox"
TERMINAL = "alacritty"

MUSIC_CTRL = "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player."

#TODO
# Gotta figure out scratchpads at some point
SCRATCH_TAG = 1 << 2

# Set spawn tagmask to ensure new windows don't have the scratchpad tag unless
# explicitly set.
all_but_scratch_tag = ((1 << 6) - 1) ^ SCRATCH_TAG

#exec(f"riverctl spawn-tagmask {all_but_scratch_tag}")

# Define a set of keybinds
# At some point I should implement keybinds for volume/brightness in locked mode too
keybindings: set[str] = {
    #TODO
    # Mouse buttons not working for whatever reason
    # Hide/toggle Waybar when it gets updated in the repos
    f"{MAP_NORMAL} {M} BTN_LEFT move-view",
    f"{MAP_NORMAL} {M} BTN_RIGHT resize-view",
    f"{MAP_NORMAL} {M} Return spawn {TERMINAL}",
    f"{MAP_NORMAL} {M} W spawn {BROWSER}",
    f"{MAP_NORMAL} {M} C spawn signal-desktop",
    f"{MAP_NORMAL} {M} S spawn spotify",
    f"{MAP_NORMAL} {M} D spawn Discord",
    f"{MAP_NORMAL} {M} R spawn 'fuzzel -f firacode:size=8 -T alacritty -w 32 -b 161320FF -t D9E0EEFF -m C9CBFFFF -s 6E6C7EFF -S 161320FF -B 2 -r 0 -C C9CBFFFF -I'",
    f"{MAP_NORMAL} {M} L spawn 'swaylock -f -c 000000'",
    f"{MAP_NORMAL} {M} P spawn 'grim -g \"$(slurp)\" - | wl-copy'",
    f"{MAP_NORMAL} {M}+{C} Return spawn pcmanfm",
    f"{MAP_NORMAL} {M}+{S} Return toggle-focused-tags {SCRATCH_TAG}",
    f"{MAP_NORMAL} {M}+{S} C close",
    f"{MAP_NORMAL} {M} F toggle-fullscreen",
    f"{MAP_NORMAL} {M}+{S} F toggle-float",
    f"{MAP_NORMAL} {M}+{S} B spawn 'callbacks battery'",
    f"{MAP_NORMAL} {M}+{S} D spawn 'callbacks date'",
    f"{MAP_NORMAL} {M} Q spawn 'callbacks mic'",
    f"{MAP_NORMAL} {M} Tab focus-previous-tags",
    f"{MAP_NORMAL} {M}+{S} R spawn $HOME/.config/river/init",
    f"{MAP_NORMAL} {M}+{S} Q exit",
    f"{MAP_NORMAL} {M} Right focus-view next",
    f"{MAP_NORMAL} {M} Up focus-view previous",
    f"{MAP_NORMAL} {M} Left focus-view previous",
    f"{MAP_NORMAL} {M} Down focus-view next",
    f"{MAP_NORMAL} {M}+{S} Right swap next",
    f"{MAP_NORMAL} {M}+{S} Up swap next",
    f"{MAP_NORMAL} {M}+{S} Down swap previous",
    f"{MAP_NORMAL} {M}+{S} Left zoom",
    f"{MAP_NORMAL} {M} Period focus-output next",
    f"{MAP_NORMAL} {M}+{S} Period send-to-output next",
    f"{MAP_NORMAL} {M}+{S} Comma send-to-output previous",
    f"{MAP_NORMAL} {M}+{A} Left send-layout-cmd rivertile 'main-ratio -0.05'",
    f"{MAP_NORMAL} {M}+{A} Right send-layout-cmd rivertile 'main-ratio +0.05'",
    f"{MAP_NORMAL} {M}+{S} Space send-layout-cmd rivertile 'main-ratio 0.5'",
    f"{MAP_NORMAL} {M} 7 spawn '{MUSIC_CTRL}Previous'",
    f"{MAP_NORMAL} {M} 8 spawn '{MUSIC_CTRL}PlayPause'",
    f"{MAP_NORMAL} {M} 9 spawn '{MUSIC_CTRL}Next'",
    f"{MAP_NORMAL} None XF86MonBrightnessDown spawn 'brightnessctl set 5%-'",
    f"{MAP_NORMAL} None XF86MonBrightnessUp spawn 'brightnessctl set +5%'",
    f"{MAP_NORMAL} None XF86AudioRaiseVolume spawn 'pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo +5%'",
    f"{MAP_NORMAL} None XF86AudioLowerVolume spawn 'pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo -5%'",
    f"{MAP_NORMAL} None XF86AudioMute spawn 'pactl set-sink-mute alsa_output.pci-0000_00_1b.0.analog-stereo toggle'",
    f"{MAP_NORMAL} {M}+{S} M spawn 'pactl set-sink-mute alsa_output.pci-0000_00_1b.0.analog-stereo toggle'",
}

# Set up all the above keybinds
for keys in keybindings:
    exec(keys)

# Set up 6 tags and create appropriate keybinds for them"""
for i in range(1, 7):
    tag = str(1 << (i - 1))
    exec(" ".join([f"{MAP_NORMAL} {M}", str(i), "set-focused-tags", tag]))
    exec(" ".join([f"{MAP_NORMAL} {M}+{S}", str(i), "set-view-tags", tag]))

# Get all tags
all_tags = str((1 << 32) - 1)
exec(f"{MAP_NORMAL} {M} 0 set-focused-tags {all_tags}")

# Set background and border color
exec("riverctl border-color-focused 0xC9CBFF")
exec("riverctl border-color-unfocused 0x6E6C7E")
exec("riverctl border-width 2")

# Set repeat rate
exec("riverctl set-repeat 50 300")

# Set app-ids of views which should float
exec("riverctl float-filter-add app-id float")

# Set app-ids of views which should use client side decorations
exec("riverctl csd-filter-add 'firefox'")

# Get all the input devices, which returns a string with linebreaks
devices: str = check_output(
    ["riverctl", "list-inputs"]
    ).decode("utf-8")

# For each line in the string, find the line containing touchpad
for device in devices.split('\n'):
    if(device.find("Touchpad")!=-1):
        exec(f"riverctl input {device} events enabled")
        exec(f"riverctl input {device} tap enabled")
        exec(f"riverctl input {device} natural-scroll enabled")

# Focus should follow cursor...
exec("riverctl focus-follows-cursor normal")

# ...and warp it if another output is focused
exec("riverctl set-cursor-warp on-output-changed")

# Set and exec into the default layout generator, rivertile.
# River will send the process group of the init executable SIGTERM on exit.
exec("riverctl default-layout rivertile")
exec("rivertile -outer-padding 0 -view-padding 0 -main-ratio 0.5")
